name: Build and Publish
on:
  push:
    branches:
      - "main"
      - "prerelease/*"
      - "v*"
    tags:
      - "v*"
  pull_request:
    branches:
      - 'main'
      - 'v*'
  release:
    types: [ published ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  SERVICE_NAME: platform-api
  IMAGE_NAME: zhimanai.azurecr.io/platform-api

jobs:
#  test:
#    runs-on: "k8s-sea1"
#    strategy:
#      matrix:
#        python-version: [ "3.11", "3.12" ]
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#      - name: Login to Docker Hub
#        uses: docker/login-action@v3
#        with:
#          registry: zhimanai.azurecr.io
#          username: ${{ secrets.DOCKER_REGISTRY_USER }}
#          password: ${{ secrets.DOCKER_REGISTRY_TOKEN }}
#      - name: Set up Python ${{ matrix.python-version }}
#        uses: actions/setup-python@v5
#        with:
#          python-version: ${{ matrix.python-version }}
#          cache: 'pip'
#      - name: Test with pytest
#        run: |
#          ENV=test python -m pytest --cov=app --cov-report=term-missing:skip-covered --junitxml=pytest.xml | tee pytest-coverage.txt
#      - name: Pytest coverage comment
#        if: ${{ !contains(github.ref, 'refs/tags/') }}
#        uses: MishaKav/pytest-coverage-comment@main
#        with:
#          pytest-coverage-path: ./pytest-coverage.txt
#          junitxml-path: ./pytest.xml


  build:
    runs-on: ${{ matrix.os }}
    #    needs: test
    strategy:
      matrix:
        os: [ ubuntu-latest, ubuntu-24.04-arm, windows-latest, macos-13, macos-14, macos-latest ]
        python-version: [ "3.10", "3.11", "3.12", "3.13" ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
#          architecture: ${{ (matrix.os == 'macos-13' && 'x64') || (matrix.os == 'macos-15' && 'arm64') || '' }}
      - name: Install dependencies
        run: |-
          pip install -r requirements.txt
          pip install -r requirements-build.txt
      - name: Build wheels
#        env:
#          _PYTHON_HOST_PLATFORM: ${{ (matrix.os == 'macos-13' && 'macosx-13.0-x86_64') || (matrix.os == 'macos-14' && 'macosx-14.0-arm64') || (matrix.os == 'macos-15' && 'macosx-15.0-arm64') || '' }}
#          ARCHFLAGS: ${{ (matrix.os == 'macos-13' && '-arch x86_64') || (matrix.os == 'macos-14' && '-arch arm64') || (matrix.os == 'macos-15' && '-arch arm64') || '' }}
        run: |
          if [ "$RUNNER_OS" == "macOS" ]; then
            if [ "$RUNNER_ARCH" == "ARM64" ]; then
              export ARCHFLAGS="-arch arm64"
              export _PYTHON_HOST_PLATFORM="macosx-$(sw_vers -productVersion | cut -d. -f1).0-arm64"
            else
              export ARCHFLAGS="-arch x86_64"
              export _PYTHON_HOST_PLATFORM="macosx-$(sw_vers -productVersion | cut -d. -f1).0-x86_64"
            fi
          fi
          if [ "$RUNNER_OS" == "Windows" ]; then
            ./build.cmd
          else
            bash build.sh
          fi
        shell: bash
      - uses: actions/upload-artifact@v4
        with:
          name: ai-search-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./dist/*.whl

  build_release:
    name: Build release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    steps:
      - name: Download all workflow run artifacts
        id: download
        uses: actions/download-artifact@v4
      - name: Glob
        id: glob
        run: |-
          find ${{ steps.download.outputs.download-path }} -name "*.whl"
          echo "files<<EOF" >> $GITHUB_OUTPUT
          find ${{ steps.download.outputs.download-path }} -name "*.whl" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      - name: Release
        uses: softprops/action-gh-release@v2
        id: create_release
        with:
          draft: false
          prerelease: true
          name: ${{ steps.version.outputs.version }}
          tag_name: ${{ github.ref }}
          body: ${{ steps.changelog.outputs.changelog }}
          files: ${{ steps.glob.outputs.files }}
          generate_release_notes: true
